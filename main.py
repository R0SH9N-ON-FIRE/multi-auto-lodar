import base64
exec(base64.b64decode(b'aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgdGltZQ0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gdGVybWNvbG9yIGltcG9ydCBjcHJpbnQNCg0KIyDilIDilIDilIAgUk9TSEFOIEJhbm5lciAoT25lLVRpbWUpIOKUgOKUgOKUgA0KZGVmIHJvc2hhbl9iYW5uZXIoKToNCiAgICBhcnQgPSBbDQogICAgICAgICJSUlJSUiAgICBPT09PTyAgIFNTU1NTICBIICAgSCAgIEFBQUFBICAgTiAgIE4iLA0KICAgICAgICAiUiAgIFIgICBPICAgICBPICBTICAgICAgSCAgIEggICBBICAgQSAgIE5OICBOIiwNCiAgICAgICAgIlJSUlJSICAgTyAgICAgTyAgU1NTU1MgIEhISEhIICAgQUFBQUEgICBOIE4gTiIsDQogICAgICAgICJSICBSICAgIE8gICAgIE8gICAgICBTICBIICAgSCAgIEEgICBBICAgTiAgTk4iLA0KICAgICAgICAiUiAgIFIgICAgT09PT08gICBTU1NTUyAgSCAgIEggICBBICAgQSAgIE4gICBOIg0KICAgIF0NCiAgICBmb3IgbGluZSBpbiBhcnQ6DQogICAgICAgIGNwcmludChsaW5lLCAiZ3JlZW4iLCBhdHRycz1bImJvbGQiXSkNCg0KaGVhZGVycyA9IHsNCiAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywNCiAgICAnQ2FjaGUtQ29udHJvbCc6ICdtYXgtYWdlPTAnLA0KICAgICdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJzogJzEnLA0KICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNicsDQogICAgJ0FjY2VwdCc6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLCovKjtxPTAuOCcsDQogICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlJywNCiAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywNCiAgICAncmVmZXJlcic6ICd3d3cuZ29vZ2xlLmNvbScNCn0NCg0KZGVmIHNlbmRfbWVzc2FnZXModG9rZW5zLCB0aHJlYWRfaWQsIHByZWZpeCwgbWVzc2FnZXMsIGRlbGF5KToNCiAgICBjeWNsZSA9IDENCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICBmb3IgdG9rZW4gaW4gdG9rZW5zOg0KICAgICAgICAgICAgZm9yIGksIG1zZyBpbiBlbnVtZXJhdGUobWVzc2FnZXMpOg0KICAgICAgICAgICAgICAgIGZ1bGxfbXNnID0gZiJ7cHJlZml4fSB7bXNnfSINCiAgICAgICAgICAgICAgICBhcGlfdXJsID0gZidodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTUuMC90X3t0aHJlYWRfaWR9LycNCiAgICAgICAgICAgICAgICBwYXJhbXMgPSB7J2FjY2Vzc190b2tlbic6IHRva2VuLCAnbWVzc2FnZSc6IGZ1bGxfbXNnfQ0KICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCclSDolTTolUycpDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoYXBpX3VybCwgZGF0YT1wYXJhbXMsIGhlYWRlcnM9aGVhZGVycykNCiAgICAgICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOg0KICAgICAgICAgICAgICAgICAgICAgICAgY3ByaW50KCJcbuKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSIsICJncmVlbiIpDQogICAgICAgICAgICAgICAgICAgICAgICBjcHJpbnQoZiLgvIYg8J2QkfCdkKjwnZCs8J2QofCdkJrwnZCnIPCdkJPwnZCo8J2QqPCdkKUg8J2QiPCdkKwg8J2QkvCdkJ7wnZCn8J2QnfCdkKLwnZCn8J2QoCDwnZCM8J2QnvCdkKzwnZCs8J2QmvCdkKDwnZCeIOC8hCIsICJncmVlbiIsIGF0dHJzPVsiYm9sZCJdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY3ByaW50KGYiIPCdkJPwnZCi8J2QpvCdkJ46IHt0aW1lc3RhbXB9IiwgImdyZWVuIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGNwcmludChmIk1lc3NhZ2U6IHtmdWxsX21zZ30iLCAiZ3JlZW4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY3ByaW50KCLilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbiIsICJncmVlbiIpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBjcHJpbnQoZiJbe3RpbWVzdGFtcH1dIOKdjCBGYWlsZWQ6IHtmdWxsX21zZ30iLCAiZ3JlZW4iKQ0KICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGRlbGF5KQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICAgICAgY3ByaW50KGYiW3t0aW1lc3RhbXB9XSDimqDvuI8gRXJyb3I6IHtlfSIsICJncmVlbiIpDQogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMzApDQogICAgICAgICAgICBjeWNsZSArPSAxDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgcHJpbnQoIlxu4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXIikNCiAgICByb3NoYW5fYmFubmVyKCkgICMgQmFubmVyIG9ubHkgb25jZQ0KICAgIHByaW50KCLilZEgICAgICAgIPCflKUgUk9TSEFOIFJVTEVYIDo6IExPQURFUiBQQU5FTCDwn5SlICAgICAgIOKVkSIpDQogICAgcHJpbnQoIuKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnVxuIikNCg0KICAgIHRva2VuX2ZpbGUgPSBpbnB1dCgi4LyGIEVudGVyIFRva2VuIEZpbGUgUGF0aCAoZWcuIG11bHRpX3Rva2VuLnR4dCkg4LyEOiAiKS5zdHJpcCgpDQogICAgdHJ5Og0KICAgICAgICB3aXRoIG9wZW4odG9rZW5fZmlsZSwgInIiLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmOg0KICAgICAgICAgICAgdG9rZW5zID0gW2xpbmUuc3RyaXAoKSBmb3IgbGluZSBpbiBmIGlmIGxpbmUuc3RyaXAoKV0NCiAgICAgICAgY3ByaW50KGYi4pyFIExvYWRlZCB7bGVuKHRva2Vucyl9IHRva2VucyBmcm9tIHt0b2tlbl9maWxlfSIsICJncmVlbiIpDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICBjcHJpbnQoZiLwn5qrIEZhaWxlZCB0byBsb2FkIHRva2VuIGZpbGU6IHtlfSIsICJncmVlbiIpDQogICAgICAgIGV4aXQoKQ0KDQogICAgdGhyZWFkX2lkID0gaW5wdXQoIuC8hiBFbnRlciBDb252byBJRCDgvIQ6ICIpLnN0cmlwKCkNCiAgICBwcmVmaXggPSBpbnB1dCgi4LyGIEVudGVyIFlvdXIgSGF0ZXIgTmFtZSDgvIQ6ICIpLnN0cmlwKCkNCiAgICB0eHRfcGF0aCA9IGlucHV0KCLgvIYgRW50ZXIgUGF0aCBmb3IgTWVzc2FnZXMgRmlsZSAoLnR4dCkg4LyEOiAiKS5zdHJpcCgpDQogICAgZGVsYXkgPSBpbnQoaW5wdXQoIuC8hiBFbnRlciBEZWxheSBpbiBTZWNvbmRzIOC8hDogIikuc3RyaXAoKSkNCg0KICAgIHRyeToNCiAgICAgICAgd2l0aCBvcGVuKHR4dF9wYXRoLCAncicsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6DQogICAgICAgICAgICBtZXNzYWdlcyA9IFtsaW5lLnN0cmlwKCkgZm9yIGxpbmUgaW4gZiBpZiBsaW5lLnN0cmlwKCldDQogICAgICAgIHNlbmRfbWVzc2FnZXModG9rZW5zLCB0aHJlYWRfaWQsIHByZWZpeCwgbWVzc2FnZXMsIGRlbGF5KQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgY3ByaW50KGYi8J+aqyBGYWlsZWQgdG8gbG9hZCBtZXNzYWdlcyBvciBpbnB1dHM6IHtlfSIsICJncmVlbiIpDQo=='))
